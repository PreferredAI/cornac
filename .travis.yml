sudo: required
language: python

matrix:
  include:
    - os: linux
      env: DISTRIB="trusty" PYTHON_VERSION="3.5"
    - os: linux
      env: DISTRIB="trusty" PYTHON_VERSION="3.6"
    - os: osx
      language: generic
      env: DISTRIB="conda" PYTHON_VERSION="3.5"
    - os: osx
      language: generic
      env: DISTRIB="conda" PYTHON_VERSION="3.6"

install:  
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh; 
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; 
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a

  - travis_retry conda create -q -n test-environment python=$PYTHON_VERSION
  - source activate test-environment

  - travis_retry pip install --only-binary=numpy,scipy numpy scipy pytest --quiet

  # Install TensorFlow CPU version.
#  - pip install tensorflow==1.12.0 --quiet
  
  # Install PyTorch CPU version.
#  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
#      pip install torch==1.0.0;
#    elif [[ "$PYTHON_VERSION" == "3.5" ]]; then
#      pip install https://download.pytorch.org/whl/cpu/torch-1.0.0-cp35-cp35m-linux_x86_64.whl;
#    elif [[ "$PYTHON_VERSION" == "3.6" ]]; then
#      pip install https://download.pytorch.org/whl/cpu/torch-1.0.0-cp36-cp36m-linux_x86_64.whl;
#    fi

  - pip install -e .[tests]

script: python -m pytest --cov=cornac

deploy:
  provider: pypi
  distributions: "sdist bdist_wheel"
  skip_existing: true
  on:
    tags: true
  user: qttruong
  password:
    secure: 2w2NsHDJGj/Dzl9JDkTS+GV5vGwp6Ys3rrTPWV/wmps2IcWvmh1k9rSVYXbpiaw1CDqOU9iMXpmwtuiuZkl1XvdlEARbOPz+gATHAhbvO+I55Ur3eOBmoUOeVfxevdY33BDlZ1Kd5GGq/bvPZheRrJZJJSeNw2rIxv6WlFgDJ0GaRGT0nFaKmEf54RVskckhURgrgLoE0spr1FDfezjFgFcApp/HBytB9uAIyl5dIP9TZBuESDSBk7qwPJzrYwd1Un9zwYDR7CbeWCHtU1I3ov1bn/f7CzUs55KVi8PFBiVc2ockW7cA8fQf3Odhg3YI2dmxuXF83uL4GWWK1W6365hyIlDz03j5DWzFp9QjqLRlvH6/rVobAbsmXGckHNv+m43hVTEN/85CDXOGxjrb4lIriheDdsTc7NT9Ovhz0JP1yX+rGETNdgHWWD88VKPUWVYDuGqs9lTTJ5r6hnma6WAXy2fbEUolAZABRHB3KWNGNRyOvIluijfc7i0Y1CHD4MYx8T29mJ5KH/bPkLc3o/TDLHaooGMp4scnyJ328O5Hd307t0BirgLA4HcKHwPV8/2nx39AN93nhywpoIoamgg9oHMLxtcgKdTqcwVHUUW1wq1FZQZkJ0hPB3Fbs7w/Y+MU0tYqrfTORmHEASgAk5/5l6YO61jSqNhXn7lgNmw=